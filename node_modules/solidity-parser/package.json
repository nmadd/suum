{
  "_args": [
    [
      {
        "raw": "solidity-parser@^0.1.0",
        "scope": null,
        "escapedName": "solidity-parser",
        "name": "solidity-parser",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/Users/zeeshanhanif/CornellTech/StartupStudio/studio/node_modules/truffle-solidity-loader"
    ]
  ],
  "_from": "solidity-parser@>=0.1.0 <0.2.0",
  "_id": "solidity-parser@0.1.1",
  "_inCache": true,
  "_location": "/solidity-parser",
  "_nodeVersion": "4.5.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/solidity-parser-0.1.1.tgz_1476286650224_0.6869859686121345"
  },
  "_npmUser": {
    "name": "tcoulter",
    "email": "tim@timothyjcoulter.com"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.2",
    "lodash.assign": "4.2.0",
    "os-locale": "1.4.0",
    "read-pkg-up": "1.0.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "strip-ansi": "3.0.1",
    "which-module": "1.0.0",
    "wrap-ansi": "2.1.0",
    "y18n": "3.2.1"
  },
  "_requested": {
    "raw": "solidity-parser@^0.1.0",
    "scope": null,
    "escapedName": "solidity-parser",
    "name": "solidity-parser",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/truffle",
    "/truffle-solidity-loader"
  ],
  "_resolved": "https://registry.npmjs.org/solidity-parser/-/solidity-parser-0.1.1.tgz",
  "_shasum": "0fb3b665ed7041bef4575962ee426e7cd9d0a90a",
  "_shrinkwrap": null,
  "_spec": "solidity-parser@^0.1.0",
  "_where": "/Users/zeeshanhanif/CornellTech/StartupStudio/studio/node_modules/truffle-solidity-loader",
  "author": {
    "name": "Tim Coulter",
    "email": "tim@timothyjcoulter.com",
    "url": "http://timothyjcoulter.com"
  },
  "bin": {
    "solidity-parser": "./cli.js"
  },
  "dependencies": {
    "mocha": "^2.4.5",
    "pegjs": "^0.9.0",
    "yargs": "^4.6.0"
  },
  "description": "PEG.js Solidity parser for Javascript",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "0fb3b665ed7041bef4575962ee426e7cd9d0a90a",
    "tarball": "https://registry.npmjs.org/solidity-parser/-/solidity-parser-0.1.1.tgz"
  },
  "gitHead": "a16a3c241aabb5871fa1b6dc41291d9df9ad254b",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tcoulter",
      "email": "tim@timothyjcoulter.com"
    }
  ],
  "name": "solidity-parser",
  "optionalDependencies": {},
  "readme": "# Solidity Parser\n\nA Solidity parser in Javascript. So we can evaluate and alter Solidity code without resorting to cruddy preprocessing.  \n\n### ⚠️ WARNING ⚠️\n\nThis is pre-alpha software. The goal of it is to take Solidity code as input and return an object as output that can be used to correctly describe that Solidity code. The structure of the resultant object is highly likely to change as the parser's features get filled out. **This parser is set to ignore Solidity constructs it's not yet able to handle.** Or, it might just error. So watch out.\n\n### Usage\n\n**Library**\n\n```\nnpm install solidity-parser\n```\n\nThen, in your code:\n\n```javascript\nvar SolidityParser = require(\"solidity-parser\");\n\n// Parse Solidity code as a string:\nvar result = SolidityParser.parse(\"contract { ... }\");\n\n// Or, parse a file:\nvar result = SolidityParser.parseFile(\"./path/to/file.sol\");\n```\n\nYou can also parse a file specifically for its imports. This won't return an abstract syntax tree, but will instead return a list of files required by the parsed file:\n\n```javascript\n\nvar SolitiyParser = require(\"solidity-parser\");\n\nvar result = SolidityParser.parseFile(\"./path/to/file.sol\", \"imports\");\n\nconsole.log(result);\n// [\n//   \"SomeFile.sol\",\n//   \"AnotherFile.sol\"\n// ]\n```\n\n**Command Line** (for convenience)\n\n```\n$ solidity-parser ./path/to/file.js\n```\n\n### Results\n\nConsider this solidity code as input:\n\n```\nimport \"Foo.sol\";\n\ncontract MyContract {\n  mapping (uint => address) public addresses;\n}\n```\n\nYou'll receiving the following (or something very similar) as output. Note that the structure of mappings could be made more clear, and this will likely be changed in the future.\n\n```json\n{\n  \"type\": \"Program\",\n  \"body\": [\n    {\n      \"type\": \"ImportStatement\",\n      \"value\": \"Foo.sol\"\n    },\n    {\n      \"type\": \"ContractStatement\",\n      \"name\": \"MyContract\",\n      \"is\": [],\n      \"body\": [\n        {\n          \"type\": \"ExpressionStatement\",\n          \"expression\": {\n            \"type\": \"DeclarativeExpression\",\n            \"name\": \"addresses\",\n            \"literal\": {\n              \"type\": \"Type\",\n              \"literal\": {\n                \"type\": \"MappingExpression\",\n                \"from\": {\n                  \"type\": \"Type\",\n                  \"literal\": \"uint\",\n                  \"members\": [],\n                  \"array_parts\": []\n                },\n                \"to\": {\n                  \"type\": \"Type\",\n                  \"literal\": \"address\",\n                  \"members\": [],\n                  \"array_parts\": []\n                }\n              },\n              \"members\": [],\n              \"array_parts\": []\n            },\n            \"is_constant\": false,\n            \"is_public\": true\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n### Test\n\nIn a checkout of the project, run:\n\n```\n$ npm test\n```\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "pegjs ./solidity.pegjs ./build/parser.js && ./node_modules/.bin/pegjs ./imports.pegjs ./build/imports_parser.js",
    "test": "mocha --reporter spec"
  },
  "version": "0.1.1"
}
