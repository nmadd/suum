{
  "_args": [
    [
      {
        "raw": "solc@0.4.8",
        "scope": null,
        "escapedName": "solc",
        "name": "solc",
        "rawSpec": "0.4.8",
        "spec": "0.4.8",
        "type": "version"
      },
      "/Users/zeeshanhanif/CornellTech/StartupStudio/studio/node_modules/truffle"
    ]
  ],
  "_from": "solc@0.4.8",
  "_id": "solc@0.4.8",
  "_inCache": true,
  "_location": "/truffle/solc",
  "_nodeVersion": "5.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/solc-0.4.8.tgz_1484313134469_0.6424130678642541"
  },
  "_npmUser": {
    "name": "chriseth",
    "email": "c@ethdev.com"
  },
  "_npmVersion": "3.8.3",
  "_phantomChildren": {
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.2",
    "lodash.assign": "4.2.0",
    "os-locale": "1.4.0",
    "read-pkg-up": "1.0.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "which-module": "1.0.0",
    "window-size": "0.2.0",
    "y18n": "3.2.1",
    "yargs-parser": "2.4.1"
  },
  "_requested": {
    "raw": "solc@0.4.8",
    "scope": null,
    "escapedName": "solc",
    "name": "solc",
    "rawSpec": "0.4.8",
    "spec": "0.4.8",
    "type": "version"
  },
  "_requiredBy": [
    "/truffle"
  ],
  "_resolved": "https://registry.npmjs.org/solc/-/solc-0.4.8.tgz",
  "_shasum": "96abbee1266341ae97fb4bdc3abcc9bc1b5052ab",
  "_shrinkwrap": null,
  "_spec": "solc@0.4.8",
  "_where": "/Users/zeeshanhanif/CornellTech/StartupStudio/studio/node_modules/truffle",
  "author": {
    "name": "chriseth"
  },
  "bin": {
    "solcjs": "solcjs"
  },
  "bugs": {
    "url": "https://github.com/ethereum/solc-js/issues"
  },
  "dependencies": {
    "fs-extra": "^0.30.0",
    "memorystream": "^0.3.1",
    "require-from-string": "^1.1.0",
    "semver": "^5.3.0",
    "yargs": "^4.7.1"
  },
  "description": "Solidity compiler",
  "devDependencies": {
    "semistandard": "^8.0.0",
    "tape": "^4.5.1",
    "tape-spawn": "^1.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "96abbee1266341ae97fb4bdc3abcc9bc1b5052ab",
    "tarball": "https://registry.npmjs.org/solc/-/solc-0.4.8.tgz"
  },
  "files": [
    "abi.js",
    "index.js",
    "solcjs",
    "soljson.js",
    "wrapper.js"
  ],
  "gitHead": "dd4e30a1f36ba2e17c2d3e6e9e3a25051499a3c9",
  "homepage": "https://github.com/ethereum/solc-js#readme",
  "keywords": [
    "ethereum",
    "solidity",
    "compiler"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chriseth",
      "email": "c@ethdev.com"
    },
    {
      "name": "d11e9",
      "email": "d11e9@turkd.net"
    }
  ],
  "name": "solc",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/ethereum/solc-js.svg?branch=master)](https://travis-ci.org/ethereum/solc-js)\n\n# solc-js\nJavaScript bindings for the [Solidity compiler](https://github.com/ethereum/solidity).\n\nUses the Emscripten compiled Solidity found in the [solc-bin repository](https://github.com/ethereum/solc-bin).\n\n## Node.js Usage\n\nTo use the latest stable version of the Solidity compiler via Node.js you can install it via npm:\n\n```bash\nnpm install solc\n```\n\n### Usage on the Command-Line\n\nIf this package is installed globally (`npm install -g solc`), a command-line tool called `solcjs` will be available.\n\nTo see all the supported features, execute:\n\n```bash\nsolcjs --help\n```\n\n### Usage in Projects\n\nIt can also be included and used in other projects:\n\n```javascript\nvar solc = require('solc');\nvar input = 'contract x { function g() {} }';\nvar output = solc.compile(input, 1); // 1 activates the optimiser\nfor (var contractName in output.contracts) {\n\t// code and ABI that are needed by web3\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode);\n\tconsole.log(contractName + '; ' + JSON.parse(output.contracts[contractName].interface));\n}\n```\n\nStarting from version 0.1.6, multiple files are supported with automatic import resolution by the compiler as follows:\n\n```javascript\nvar solc = require('solc');\nvar input = {\n\t'lib.sol': 'library L { function f() returns (uint) { return 7; } }',\n\t'cont.sol': 'import \"lib.sol\"; contract x { function g() { L.f(); } }'\n};\nvar output = solc.compile({sources: input}, 1);\nfor (var contractName in output.contracts)\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode);\n```\n\nNote that all input files that are imported have to be supplied, the compiler will not load any additional files on its own.\n\nStarting from version 0.2.1, a callback is supported to resolve missing imports as follows:\n\n```javascript\nvar solc = require('solc');\nvar input = {\n\t'cont.sol': 'import \"lib.sol\"; contract x { function g() { L.f(); } }'\n};\nfunction findImports(path) {\n\tif (path === 'lib.sol')\n\t\treturn { contents: 'library L { function f() returns (uint) { return 7; } }' }\n\telse\n\t\treturn { error: 'File not found' }\n}\nvar output = solc.compile({sources: input}, 1, findImports);\nfor (var contractName in output.contracts)\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode);\n```\n\n**Note:**\nIf you are using Electron, `nodeIntegration` is on for `BrowserWindow` by default. If it is on, Electron will provide a `require` method which will not behave as expected and this may cause calls, such as `require('solc')`, to fail.\n\nTo turn off `nodeIntegration`, use the following:\n\n```javascript\nnew BrowserWindow({\n\twebPreferences: {\n\t\tnodeIntegration: false\n\t}\n});\n```\n\n### Using a Legacy Version\n\nIn order to compile contracts using a specific version of Solidity, the `solc.useVersion` method is available. This returns a new `solc` object that uses a version of the compiler specified. **Note**: version strings must match the version substring of the files available in `/bin/soljson-*.js`. See below for an example.\n\n```javascript\nvar solc = require('solc');\n// by default the latest version is used\n// ie: solc.useVersion('latest')\n\n// getting a legacy version\nvar solcV011 = solc.useVersion('v0.1.1-2015-08-04-6ff4cd6');\nvar output = solcV011.compile('contract t { function g() {} }', 1);\n```\n\nIf the version is not available locally, you can use `solc.loadRemoteVersion(version, callback)` to load it directly from GitHub.\n\nYou can also load the \"binary\" manually and use `setupMethods` to create the familiar wrapper functions described above:\n`var solc = solc.setupMethods(require(\"/my/local/soljson.js\"))`.\n\n### Using the Latest Development Snapshot\n\nBy default, the npm version is only created for releases. This prevents people from deploying contracts with non-release versions because they are less stable and harder to verify. If you would like to use the latest development snapshot (at your own risk!), you may use the following example code.\n\n```javascript\nvar solc = require('solc');\n\n// getting the development snapshot\nsolc.loadRemoteVersion('latest', function(err, solcSnapshot) {\n\tif (err) {\n\t\t// An error was encountered, display and quit\n\t}\n\tvar output = solcSnapshot.compile(\"contract t { function g() {} }\", 1);\n});\n```\n\n### Linking Bytecode\n\nWhen using libraries, the resulting bytecode will contain placeholders for the real addresses of the referenced libraries. These have to be updated, via a process called linking, before deploying the contract.\n\nThe `linkBytecode` method provides a simple helper for linking:\n\n```javascript\nbytecode = solc.linkBytecode(bytecode, { 'MyLibrary': '0x123456...' });\n```\n\nNote: in future versions of Solidity a more sophisticated linker architecture will be introduced.  Once that changes, this method will still be usable for output created by old versions of Solidity.\n\n### Updating the ABI\n\nThe ABI generated by Solidity versions can differ slightly, due to new features introduced.  There is a tool included which aims to translate the ABI generated by an older Solidity version to conform to the latest standard.\n\nIt can be used as:\n```javascript\nvar abi = require('solc/abi');\n\nvar inputABI = [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"}];\nvar outputABI = abi.update('0.3.6', inputABI)\n// Output contains: [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"type\":\"function\"},{\"type\":\"fallback\",\"payable\":true}]\n\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereum/solc-js.git"
  },
  "scripts": {
    "lint": "semistandard",
    "prepublish": "./downloadCurrentVersion.js",
    "test": "tape ./test/index.js"
  },
  "semistandard": {
    "ignore": [
      "soljson.js"
    ]
  },
  "version": "0.4.8"
}
